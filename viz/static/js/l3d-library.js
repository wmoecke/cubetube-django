class Cube {
    color[][][] voxels;
    int[][][] r;
    int[][][] g;
    int[][][] b;
    int size;
    int scale;
    PVector center;
    PApplet parent;
    boolean clearToSend;
    int rate;
    int frameSize;
    var frameBuffer;
    float mouseXDiff=0, mouseYDiff=0;
    Text text;
    Cube(PApplet _parent)
    {	
	parent=_parent;
	size=8;
	clearToSend=true;
	frameSize=512;
	this.frameBuffer= new ArrayBuffer(frameSize);
	scale=height/size/2;
	//println("height: "+height+"  width: "+width+"  size: "+size+"  scale: "+scale);
	voxels=new color[size][size][size];
	r=new int[size][size][size];
        g=new int[size][size][size];
	b=new int[size][size][size];
	center=new PVector(scale*(size-1)/2, scale*(size-1)/2, scale*(size-1)/2);
	text=new Text(this);
    }

    void draw()
    {
	//set the background color and mouse-controlled rotations
	parent.background( color(28, 21, 33) );
	translate(width/2, height/2);
	//	rotateY(mouseXDiff/60);
	//	rotateX(mouseYDiff/60);
	rotateY(mouseX/60);
	rotateX(mouseY/60);

	for (int x=0; x<size; x++)
      	    for (int y=0; y<size; y++)
		for (int z=0; z<size; z++)
		    {
			r[x][y][z]=red(voxels[x][y][z]);
			g[x][y][z]=green(voxels[x][y][z]);
			b[x][y][z]=blue(voxels[x][y][z]);
			pushMatrix();
			translate(scale*x-center.x, scale*(size-1-y)-center.y, scale* z-center.z);
			color voxelColor=voxels[x][y][z];
			noStroke();
			if (brightness(voxelColor)>0)
			    fill(voxelColor);
			else
			    noFill();
			box(scale);
			popMatrix();
		    }
	stroke(255);
	strokeWeight(0.25);
	box(size*scale);
	if(!(typeof streaming === 'undefined' ))
	    {
		if(streaming!=null)
		{
		 //   console.log(streaming);
		    streaming.bufferVoxels(r, g, b);
		}
	    }
	
    }
	/**
	 * This will  a text message across the zPlane of the initialPosition message.
	 * 
	 * @example Text
	 * @param message -- the text string to scroll
	 * @param initialPosition -- a PVector with the position of the first character in the string.  The function will draw the rest
	 * of the string relative to this point
	 * @param col -- the color of the text
	 *            
	 */
	 void scrollText(String message, PVector initialPosition, int col)
	{
		text.scrollText(message, initialPosition, col);
	}
	
	/**
	 * This will  a text message across the zPlane of the initialPosition message, with the letters rotating along their y axes
	 * For more elaborate letter rotations, check out the Text.showChar function
	 * 
	 * @example Text
	 * @param message -- the text string to scroll
	 * @param initialPosition -- a PVector with the position of the first character in the string.  The function will draw the rest
	 * of the string relative to this point
	 * @param col -- the color of the text
	 *            
	 */
	 void scrollSpinningText(String message, PVector initialPosition, int col)
	{
		text.scrollSpinningText(message, initialPosition, col);
	}
	

	
	
	/**
	 * Marches a text marquis across the sides and front of the cube
	 * 
	 * @example Text
	 * @param message -- the text string to scroll
	 * @param initialPosition -- a float indicating how far the message is (in voxels) from the back right corner of the tube.  
	 * The rest of the message will be drawn relative to this position
	 * @param col -- the color of the text
	 *            
	 */
	 void marquis(String message, float initialPosition, int col)
	{
		text.marquis(message, initialPosition, col);
	}

    void mouseDragged()
    {
	mouseXDiff+=(mouseX-pMouseX);
	mouseYDiff+=(mouseY-pMouseY);
    }
    void setVoxel(float x, float y, float z, color col)
    {
	PVector pos=new PVector(x,y,z);
	if ((pos.x>=0)&&(pos.x<size))
	    if ((pos.y>=0)&&(pos.y<size))
		if ((pos.z>=0)&&(pos.z<size))
		    voxels[(int)pos.x][(int)pos.y][(int)pos.z]=col;
    }

    void setVoxel(PVector pos, color col)
    {
	if ((pos.x>=0)&&(pos.x<size))
	    if ((pos.y>=0)&&(pos.y<size))
		if ((pos.z>=0)&&(pos.z<size))
		    voxels[(int)pos.x][(int)pos.y][(int)pos.z]=col;
    }

    void background(color col)
    {
	for (int x=0; x<size; x++)
	    for (int y=0; y<size; y++)
		for (int z=0; z<size; z++)
		    voxels[x][y][z]=col;
    }

    void sphere(PVector center, float radius, color col)
    {
	float steps=30;
	for (float theta=0; theta<steps; theta++)
	    for (float phi=0; phi<steps; phi++)
		setVoxel( new PVector((float)(center.x + radius * Math.sin((float) Math.PI *theta/ steps) * Math.cos((float) 2 * Math.PI *phi/ steps)), 
				      (float)(center.y + radius * Math.sin((float) Math.PI *theta/ steps) * Math.sin((float) 2 * Math.PI *phi/ steps)), 
				      (float)(center.z + radius * Math.cos((float) Math.PI *theta/ steps))), 
			  col);
    }


    void shell(float x, float y,float z, float r, color col)
    {
	float thickness =0.1;
	for(int i=0;i<size;i++)
	    for(int j=0;j<size;j++)
		for(int k=0;k<size;k++)
		    if(abs(sqrt(pow(i-x,2)+pow(j-y,2)+pow(k-z,2))-r)<thickness)
			setVoxel(i,j,k,col);
    }

    /** Draw a shell (empty sphere).                                                                                                                                                     
                                                                                                                                                                                     
  @param x Position of the center of the shell.                                                                                                                                      
  @param y Position of the center of the shell.                                                                                                                                      
  @param z Position of the center of the shell.                                                                                                                                      
  @param r Radius of the shell.                                                                                                                                                      
  @param thickness Thickness of the shell.                                                                                                                                           
  @param col Color of the shell.                                                                                                                                                     
    */
    void shell(float x, float y,float z, float r, float thickness, color col)
    {
	for(int i=0;i<size;i++)
	    for(int j=0;j<size;j++)
		for(int k=0;k<size;k++)
		    if(abs(sqrt(pow(i-x,2)+pow(j-y,2)+pow(k-z,2))-r)<thickness)
			setVoxel(i,j,k,col);
    }

    void shell(PVector p, float r, color col)
    {
	shell(p.x, p.y, p.z, r, col);
    }

    /** Draw a shell (empty sphere).                                                                                                                                                     
                                                                                                                                                                                     
  @param p Position of the center of the shell.                                                                                                                                      
  @param r Radius of the shell.                                                                                                                                                      
  @param thickness Thickness of the shell                                                                                                                                            
  @param col Color of the shell.                                                                                                                                                     
    */
    void shell(PVector p, float r, float thickness, color col)
    {
	shell(p.x, p.y, p.z, r, thickness, col);
    }

    

    // returns the color at the integer location closest
    // to the PVector point
    color getVoxel(PVector pos) {
	if ((pos.x>=0)&&(pos.x<size))
	    if ((pos.y>=0)&&(pos.y<size))
		if ((pos.z>=0)&&(pos.z<size))
		    return voxels[(int) pos.x][(int) pos.y][(int) pos.z];
	return color(0);
    }

    // draws a line from point p1 to p2 and colors each of the points according
    // to the col parameter
    // p1 and p2 can be outsize of the cube, but it will only draw the parts of
    // the line that fall
    // insize the cube
    void line(PVector p1, PVector p2, color col) {
	// thanks to Anthony Thyssen for the original write of Bresenham's line
	// algorithm in 3D
	// http://www.ict.griffith.edu.au/anthony/info/graphics/bresenham.procs

	float dx, dy, dz, l, m, n, dx2, dy2, dz2, i, x_inc, y_inc, z_inc, err_1, err_2;
	PVector currentPoint = new PVector(p1.x, p1.y, p1.z);
	dx = p2.x - p1.x;
	dy = p2.y - p1.y;
	dz = p2.z - p1.z;
	x_inc = (dx < 0) ? -1 : 1;
	l = Math.abs(dx);
	y_inc = (dy < 0) ? -1 : 1;
	m = Math.abs(dy);
	z_inc = (dz < 0) ? -1 : 1;
	n = Math.abs(dz);
	dx2 = l * 2;
	dy2 = m * 2;
	dz2 = n * 2;

	if ((l >= m) && (l >= n)) {
	    err_1 = dy2 - l;
	    err_2 = dz2 - l;
	    for (i = 0; i < l; i++) {
		setVoxel(currentPoint, col);
		if (err_1 > 0) {
		    currentPoint.y += y_inc;
		    err_1 -= dx2;
		}
		if (err_2 > 0) {
		    currentPoint.z += z_inc;
		    err_2 -= dx2;
		}
		err_1 += dy2;
		err_2 += dz2;
		currentPoint.x += x_inc;
	    }
	} else if ((m >= l) && (m >= n)) {
	    err_1 = dx2 - m;
	    err_2 = dz2 - m;
	    for (i = 0; i < m; i++) {
		setVoxel(currentPoint, col);
		if (err_1 > 0) {
		    currentPoint.x += x_inc;
		    err_1 -= dy2;
		}
		if (err_2 > 0) {
		    currentPoint.z += z_inc;
		    err_2 -= dy2;
		}
		err_1 += dx2;
		err_2 += dz2;
		currentPoint.y += y_inc;
	    }
	} else {
	    err_1 = dy2 - n;
	    err_2 = dx2 - n;
	    for (i = 0; i < n; i++) {
		setVoxel(currentPoint, col);
		if (err_1 > 0) {
		    currentPoint.y += y_inc;
		    err_1 -= dz2;
		}
		if (err_2 > 0) {
		    currentPoint.x += x_inc;
		    err_2 -= dz2;
		}
		err_1 += dy2;
		err_2 += dx2;
		currentPoint.z += z_inc;
	    }
	}

	setVoxel(currentPoint, col);
    }
  
    // draws a line from point p1 to p2 and colors each of the points according
    // to the col parameter
    // p1 and p2 can be outsize of the cube, but it will only draw the parts of
    // the line that fall
    // inside the cube
    void rainbowLine(PVector p1, PVector p2, color startColor, color endColor) {
	// thanks to Anthony Thyssen for the original write of Bresenham's line
	// algorithm in 3D
	// http://www.ict.griffith.edu.au/anthony/info/graphics/bresenham.procs

	float dx, dy, dz, l, m, n, dx2, dy2, dz2, i, x_inc, y_inc, z_inc, err_1, err_2;
	PVector currentPoint = new PVector(p1.x, p1.y, p1.z);
	dx = p2.x - p1.x;
	dy = p2.y - p1.y;
	dz = p2.z - p1.z;
	x_inc = (dx < 0) ? -1 : 1;
	l = Math.abs(dx);
	y_inc = (dy < 0) ? -1 : 1;
	m = Math.abs(dy);
	z_inc = (dz < 0) ? -1 : 1;
	n = Math.abs(dz);
	dx2 = l * 2;
	dy2 = m * 2;
	dz2 = n * 2;

	if ((l >= m) && (l >= n)) {
	    err_1 = dy2 - l;
	    err_2 = dz2 - l;
	    for (i = 0; i < l; i++) {
		setVoxel(currentPoint, lerpColor(startColor, endColor, currentPoint.dist(p1)/p2.dist(p1)));
		if (err_1 > 0) {
		    currentPoint.y += y_inc;
		    err_1 -= dx2;
		}
		if (err_2 > 0) {
		    currentPoint.z += z_inc;
		    err_2 -= dx2;
		}
		err_1 += dy2;
		err_2 += dz2;
		currentPoint.x += x_inc;
	    }
	} else if ((m >= l) && (m >= n)) {
	    err_1 = dx2 - m;
	    err_2 = dz2 - m;
	    for (i = 0; i < m; i++) {
		setVoxel(currentPoint, lerpColor(startColor, endColor, currentPoint.dist(p1)/p2.dist(p1)));
		if (err_1 > 0) {
		    currentPoint.x += x_inc;
		    err_1 -= dy2;
		}
		if (err_2 > 0) {
		    currentPoint.z += z_inc;
		    err_2 -= dy2;
		}
		err_1 += dx2;
		err_2 += dz2;
		currentPoint.y += y_inc;
	    }
	} else {
	    err_1 = dy2 - n;
	    err_2 = dx2 - n;
	    for (i = 0; i < n; i++) {
		setVoxel(currentPoint, lerpColor(startColor, endColor, currentPoint.dist(p1)/p2.dist(p1)));
		if (err_1 > 0) {
		    currentPoint.y += y_inc;
		    err_1 -= dz2;
		}
		if (err_2 > 0) {
		    currentPoint.x += x_inc;
		    err_2 -= dz2;
		}
		err_1 += dy2;
		err_2 += dx2;
		currentPoint.z += z_inc;
	    }
	}

	setVoxel(currentPoint, lerpColor(startColor, endColor, currentPoint.dist(p1)/p2.dist(p1)));
    }
  
  

    color colorMap(float val, float min, float max) {
	float range = 1024;
	val = map(val, min, max, 0, range);
	color colors[] = new color[6];
	colors[0] = color(0, 0, 255);
	colors[1] = color(0, 255, 255);
	colors[2] = color(0, 255, 0);
	colors[3] = color(255, 255, 0);
	colors[4] = color(255, 0, 0);
	colors[5] = color(255, 0, 255);
	if (val <= range / 6) {
	    return (lerpColor(colors[0], colors[1], val / (range / 6)));
	} else if (val <= 2 * range / 6)
	    return (lerpColor(colors[1], colors[2], 
			      (val / (range / 6)) - 1));
	else if (val <= 3 * range / 6)
	    return (lerpColor(colors[2], colors[3], 
			      (val / (range / 6)) - 2));
	else if (val <= 4 * range / 6)
	    return (lerpColor(colors[3], colors[4], 
			      (val / (range / 6)) - 3));
	else if (val <= 5 * range / 6)
	    return (lerpColor(colors[4], colors[5], 
			      (val / (range / 6)) - 4));
	else
	    return (lerpColor(colors[5], colors[0], 
			      (val / (range / 6)) - 5));
    }
}

//based on Hape's Text code for the cube
class Text {
	final int COMPUTER_FONT=0;
	final int CUBE_FONT=256;
	boolean looping;
	String text;
	boolean done;
//	Cube cube;
	int selectedFont;
	 Text(Cube _cube)
	 {
	     
//		 cube=_cube;
	     console.log("initializing text object");
	     console.log(cube);
		 text="";
		 done=false;
		 looping=false;
		 selectedFont=CUBE_FONT;
	 }
	 Text(String _text)
	 {
		 text=_text;
		 done=false;
		 looping=false;		 
	 }
	 
	 void showChar(char a, PVector p, color col)
	 {
		 for(int row=0;row<8;row++)
			 for(int bit=0;bit<8;bit++)
				 if(((font[((int)a+selectedFont)*8+row]>>(7-bit))&0x01)==1)
				 		cube.setVoxel(p.x+bit, (p.y)+(cube.size-1-row), p.z, col);
	 }
	 
	 void showChar(char a, PVector origin, PVector angle, color col)
	 {
		 showChar(a, origin, new PVector(0,0,0), angle, col);
	 }

	 void showChar(char a, PVector origin, PVector pivot, PVector angle, color col)
	 {

		 for(int row=0;row<8;row++)
			 for(int bit=0;bit<8;bit++)
				 if(((font[((int)a+selectedFont)*8+(7-row)]>>(7-bit))&0x01)==1)
				 		cube.setVoxel(origin.x+((float)bit-pivot.x)*Math.cos(angle.y), 
				 				origin.y+((float)row-pivot.y)*Math.cos(angle.x), 
				 				origin.z+((float)row-pivot.y)*Math.sin(angle.x)+((float)bit-pivot.y)*Math.sin(angle.y), col);
		 

		 }
	 
	 void scrollSpinningText(String msg, PVector initialPosition, color col)
	 {
		 for(int i=0;i<msg.length();i++)
			 showChar(msg.charAt(i), new PVector(8*i-initialPosition.x, initialPosition.y, initialPosition.z), new PVector(0,initialPosition.x,0), col);
	 }

	 
	 void scrollText(String msg, PVector initialPosition, color col)
	 {
		 for(int i=0;i<msg.length();i++)
			 showChar(msg.charAt(i), new PVector(8*i-initialPosition.x, initialPosition.y, initialPosition.z), col);
	 }
	 
	 void marquee(String msg, float pos, color col)
	 {
		 marquis(msg, pos, col);  //fixed a spelling error
	 }
	 
	 void marquis(String msg, float pos, color col)
	 {
		 
		 for(int i=0;i<msg.length();i++)
			 showMarquisChar(msg.charAt(i), (int)pos - 8*i, col);
	 }

	 void showMarqueeChar(char a, int pos, color col)
	 {
		 showMarquisChar(a,pos,col);  //fixed a spelling error
	 }

	 void showMarquisChar(char a, int pos, color col)
	 {		 
		 for(int row=0;row<8;row++)
			 for(int bit=0;bit<8;bit++)
				 if(((font[((int)a+selectedFont)*8+row]>>(7-bit))&0x01)==1)
				 {
					 if((pos-bit)<cube.size)
				     {
					 		cube.setVoxel(cube.size-1, cube.size-1-row, pos-bit, col);
					 console.log((cube.size-1)+", "+(cube.size-1-row)+", "+(pos-bit));
				     }
					 if(((pos-bit)>=cube.size)&&((pos-bit)<2*cube.size))
					 		cube.setVoxel((cube.size-1)-(pos-bit-cube.size), cube.size-1-row, cube.size-1, col);
					 if((pos-bit)>2*cube.size)
					 		cube.setVoxel(0, cube.size-1-row, cube.size-1-(pos-bit-2*cube.size), col);
					 		
				 }
	 }
		 
	 byte[] font =
		  {
			    // tinytype.pf  
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 000 (.)
			    (byte)0x7E, (byte)0x81, (byte)0xA5, (byte)0x81, (byte)0xA5, (byte)0x99, (byte)0x81, (byte)0x7E, // Char 001 (.)
			    (byte)0x3C, (byte)0x7E, (byte)0xDB, (byte)0xFF, (byte)0xC3, (byte)0x7E, (byte)0x3C, (byte)0x00, // Char 002 (.)
			    (byte)0x00, (byte)0x6C, (byte)0xFE, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x10, (byte)0x00, // Char 003 (.)
			    (byte)0x10, (byte)0x38, (byte)0x7C, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x10, (byte)0x00, // Char 004 (.)
			    (byte)0x00, (byte)0x3C, (byte)0x18, (byte)0xFF, (byte)0xFF, (byte)0x08, (byte)0x18, (byte)0x00, // Char 005 (.)
			    (byte)0x10, (byte)0x38, (byte)0x7C, (byte)0xFE, (byte)0xFE, (byte)0x10, (byte)0x38, (byte)0x00, // Char 006 (.)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x3C, (byte)0x18, (byte)0x00, (byte)0x00, (byte)0x00, // Char 007 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xE7, (byte)0xC3, (byte)0xE7, (byte)0xFF, (byte)0xFF, (byte)0xFF, // Char 008 (.)
			    (byte)0x00, (byte)0x3C, (byte)0x42, (byte)0x81, (byte)0x81, (byte)0x42, (byte)0x3C, (byte)0x00, // Char 009 (.)
			    (byte)0xFF, (byte)0xC3, (byte)0xBD, (byte)0x7E, (byte)0x7E, (byte)0xBD, (byte)0xC3, (byte)0xFF, // Char 010 (.)
			    (byte)0x1F, (byte)0x07, (byte)0x0D, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 011 (.)
			    (byte)0x00, (byte)0x7E, (byte)0xC3, (byte)0xC3, (byte)0x7E, (byte)0x18, (byte)0x7E, (byte)0x18, // Char 012 (.)
			    (byte)0x04, (byte)0x06, (byte)0x07, (byte)0x04, (byte)0x04, (byte)0xFC, (byte)0xF8, (byte)0x00, // Char 013 (.)
			    (byte)0x0C, (byte)0x0A, (byte)0x0D, (byte)0x0B, (byte)0xF9, (byte)0xF9, (byte)0x1F, (byte)0x1F, // Char 014 (.)
			    (byte)0x00, (byte)0x92, (byte)0x7C, (byte)0x6C, (byte)0xC6, (byte)0x6C, (byte)0x7C, (byte)0x92, // Char 015 (.)
			    (byte)0x00, (byte)0x00, (byte)0x60, (byte)0x78, (byte)0x7E, (byte)0x78, (byte)0x60, (byte)0x00, // Char 016 (.)
			    (byte)0x00, (byte)0x00, (byte)0x06, (byte)0x1E, (byte)0x7E, (byte)0x1E, (byte)0x06, (byte)0x00, // Char 017 (.)
			    (byte)0x18, (byte)0x7E, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x7E, (byte)0x18, // Char 018 (.)
			    (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x00, (byte)0x24, (byte)0x00, // Char 019 (.)
			    (byte)0xFF, (byte)0xB6, (byte)0x76, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x00, // Char 020 (.)
			    (byte)0x7E, (byte)0xC1, (byte)0xDC, (byte)0x22, (byte)0x22, (byte)0x1F, (byte)0x83, (byte)0x7E, // Char 021 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0x7E, (byte)0x00, (byte)0x00, (byte)0x00, // Char 022 (.)
			    (byte)0x18, (byte)0x7E, (byte)0x18, (byte)0x18, (byte)0x7E, (byte)0x18, (byte)0x00, (byte)0xFF, // Char 023 (.)
			    (byte)0x08, (byte)0x1C, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x00, // Char 024 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x1C, (byte)0x08, (byte)0x00, // Char 025 (.)
			    (byte)0x00, (byte)0x00, (byte)0x02, (byte)0xFF, (byte)0x02, (byte)0x00, (byte)0x00, (byte)0x00, // Char 026 (.)
			    (byte)0x00, (byte)0x00, (byte)0x40, (byte)0xFF, (byte)0x40, (byte)0x00, (byte)0x00, (byte)0x00, // Char 027 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xC0, (byte)0xC0, (byte)0xC0, (byte)0xFF, (byte)0x00, // Char 028 (.)
			    (byte)0x00, (byte)0x24, (byte)0x66, (byte)0xFF, (byte)0x66, (byte)0x24, (byte)0x00, (byte)0x00, // Char 029 (.)
			    (byte)0x00, (byte)0x00, (byte)0x10, (byte)0x38, (byte)0x7C, (byte)0xFE, (byte)0x00, (byte)0x00, // Char 030 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x10, (byte)0x00, // Char 031 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 032 ( )
			    (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, (byte)0x10, (byte)0x00, // Char 033 (!)
			    (byte)0x44, (byte)0x22, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 034 (")
			    (byte)0x28, (byte)0x28, (byte)0xFE, (byte)0x28, (byte)0xFE, (byte)0x28, (byte)0x28, (byte)0x00, // Char 035 (#)
			    (byte)0x28, (byte)0x7C, (byte)0xA8, (byte)0x7C, (byte)0x2A, (byte)0x7C, (byte)0x28, (byte)0x00, // Char 036 ($)
			    (byte)0x60, (byte)0x94, (byte)0x68, (byte)0x10, (byte)0x2C, (byte)0x52, (byte)0x8C, (byte)0x00, // Char 037 (%)
			    (byte)0x30, (byte)0x48, (byte)0x30, (byte)0x48, (byte)0x86, (byte)0x84, (byte)0x78, (byte)0x00, // Char 038 (&)
			    (byte)0x04, (byte)0x04, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 039 (')
			    (byte)0x10, (byte)0x20, (byte)0x40, (byte)0x40, (byte)0x40, (byte)0x20, (byte)0x10, (byte)0x00, // Char 040 (()
			    (byte)0x10, (byte)0x08, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x00, // Char 041 ())
			    (byte)0x00, (byte)0x54, (byte)0x38, (byte)0x7C, (byte)0x38, (byte)0x54, (byte)0x00, (byte)0x00, // Char 042 (*)
			    (byte)0x00, (byte)0x08, (byte)0x08, (byte)0x3E, (byte)0x08, (byte)0x08, (byte)0x00, (byte)0x00, // Char 043 (+)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x10, // Char 044 (,)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 045 (-)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x08, (byte)0x00, // Char 046 (.)
			    (byte)0x02, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x40, (byte)0x80, (byte)0x00, // Char 047 (/)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x2C, (byte)0x34, (byte)0x24, (byte)0x18, (byte)0x00, // Char 048 (0)
			    (byte)0x00, (byte)0x10, (byte)0x30, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x38, (byte)0x00, // Char 049 (1)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x04, (byte)0x18, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 050 (2)
			    (byte)0x00, (byte)0x38, (byte)0x04, (byte)0x18, (byte)0x04, (byte)0x04, (byte)0x38, (byte)0x00, // Char 051 (3)
			    (byte)0x00, (byte)0x20, (byte)0x28, (byte)0x28, (byte)0x3C, (byte)0x08, (byte)0x08, (byte)0x00, // Char 052 (4)
			    (byte)0x00, (byte)0x3C, (byte)0x20, (byte)0x38, (byte)0x04, (byte)0x04, (byte)0x38, (byte)0x00, // Char 053 (5)
			    (byte)0x00, (byte)0x1C, (byte)0x20, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x18, (byte)0x00, // Char 054 (6)
			    (byte)0x00, (byte)0x3C, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, // Char 055 (7)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x18, (byte)0x00, // Char 056 (8)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x1C, (byte)0x04, (byte)0x38, (byte)0x00, // Char 057 (9)
			    (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, // Char 058 (:)
			    (byte)0x00, (byte)0x10, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x10, (byte)0x20, (byte)0x00, // Char 059 (;)
			    (byte)0x00, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x10, (byte)0x08, (byte)0x00, (byte)0x00, // Char 060 (<)
			    (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0x00, (byte)0x7E, (byte)0x00, (byte)0x00, (byte)0x00, // Char 061 (=)
			    (byte)0x00, (byte)0x20, (byte)0x10, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x00, (byte)0x00, // Char 062 (>)
			    (byte)0x7C, (byte)0x82, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x00, (byte)0x10, (byte)0x00, // Char 063 (?)
			    (byte)0x7C, (byte)0x82, (byte)0x9A, (byte)0xAA, (byte)0xAA, (byte)0x9E, (byte)0x7C, (byte)0x00, // Char 064 (@)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x3C, (byte)0x24, (byte)0x24, (byte)0x00, // Char 065 (A)
			    (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x38, (byte)0x00, // Char 066 (B)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x20, (byte)0x20, (byte)0x24, (byte)0x18, (byte)0x00, // Char 067 (C)
			    (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x38, (byte)0x00, // Char 068 (D)
			    (byte)0x00, (byte)0x3C, (byte)0x20, (byte)0x38, (byte)0x20, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 069 (E)
			    (byte)0x00, (byte)0x3C, (byte)0x20, (byte)0x38, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x00, // Char 070 (F)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x20, (byte)0x2C, (byte)0x24, (byte)0x18, (byte)0x00, // Char 071 (G)
			    (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x3C, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x00, // Char 072 (H)
			    (byte)0x00, (byte)0x38, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x38, (byte)0x00, // Char 073 (I)
			    (byte)0x00, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x24, (byte)0x18, (byte)0x00, // Char 074 (J)
			    (byte)0x00, (byte)0x28, (byte)0x28, (byte)0x30, (byte)0x28, (byte)0x24, (byte)0x24, (byte)0x00, // Char 075 (K)
			    (byte)0x00, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 076 (L)
			    (byte)0x00, (byte)0x44, (byte)0x6C, (byte)0x54, (byte)0x44, (byte)0x44, (byte)0x44, (byte)0x00, // Char 077 (M)
			    (byte)0x00, (byte)0x24, (byte)0x34, (byte)0x34, (byte)0x2C, (byte)0x2C, (byte)0x24, (byte)0x00, // Char 078 (N)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x18, (byte)0x00, // Char 079 (O)
			    (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x38, (byte)0x20, (byte)0x20, (byte)0x00, // Char 080 (P)
			    (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x1C, (byte)0x02, // Char 081 (Q)
			    (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x00, // Char 082 (R)
			    (byte)0x00, (byte)0x1C, (byte)0x20, (byte)0x18, (byte)0x04, (byte)0x04, (byte)0x38, (byte)0x00, // Char 083 (S)
			    (byte)0x00, (byte)0x38, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, // Char 084 (T)
			    (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x3C, (byte)0x00, // Char 085 (U)
			    (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x14, (byte)0x0C, (byte)0x00, // Char 086 (V)
			    (byte)0x00, (byte)0x44, (byte)0x44, (byte)0x44, (byte)0x54, (byte)0x6C, (byte)0x44, (byte)0x00, // Char 087 (W)
			    (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x10, (byte)0x08, (byte)0x24, (byte)0x24, (byte)0x00, // Char 088 (X)
			    (byte)0x00, (byte)0x22, (byte)0x22, (byte)0x14, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x00, // Char 089 (Y)
			    (byte)0x00, (byte)0x3C, (byte)0x04, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 090 (Z)
			    (byte)0x1C, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x1C, (byte)0x00, // Char 091 ([)
			    (byte)0x80, (byte)0x40, (byte)0x20, (byte)0x10, (byte)0x08, (byte)0x04, (byte)0x02, (byte)0x00, // Char 092 (\)
			    (byte)0x70, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x70, (byte)0x00, // Char 093 (])
			    (byte)0x00, (byte)0x00, (byte)0x10, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0x00, (byte)0x00, // Char 094 (^)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, // Char 095 (_)
			    (byte)0x10, (byte)0x10, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 096 (`)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x3C, (byte)0x24, (byte)0x24, (byte)0x00, // Char 097 (a)
			    (byte)0x00, (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x38, (byte)0x24, (byte)0x38, (byte)0x00, // Char 098 (b)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x20, (byte)0x24, (byte)0x18, (byte)0x00, // Char 099 (c)
			    (byte)0x00, (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x38, (byte)0x00, // Char 100 (d)
			    (byte)0x00, (byte)0x00, (byte)0x3C, (byte)0x20, (byte)0x38, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 101 (e)
			    (byte)0x00, (byte)0x00, (byte)0x3C, (byte)0x20, (byte)0x38, (byte)0x20, (byte)0x20, (byte)0x00, // Char 102 (f)
			    (byte)0x00, (byte)0x00, (byte)0x1C, (byte)0x20, (byte)0x2C, (byte)0x24, (byte)0x18, (byte)0x00, // Char 103 (g)
			    (byte)0x00, (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x3C, (byte)0x24, (byte)0x24, (byte)0x00, // Char 104 (h)
			    (byte)0x00, (byte)0x00, (byte)0x1C, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x1C, (byte)0x00, // Char 105 (i)
			    (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x04, (byte)0x04, (byte)0x24, (byte)0x18, (byte)0x00, // Char 106 (j)
			    (byte)0x00, (byte)0x00, (byte)0x24, (byte)0x28, (byte)0x30, (byte)0x28, (byte)0x24, (byte)0x00, // Char 107 (k)
			    (byte)0x00, (byte)0x00, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x20, (byte)0x3C, (byte)0x00, // Char 108 (l)
			    (byte)0x00, (byte)0x00, (byte)0x42, (byte)0x66, (byte)0x5A, (byte)0x42, (byte)0x42, (byte)0x00, // Char 109 (m)
			    (byte)0x00, (byte)0x00, (byte)0x24, (byte)0x34, (byte)0x3C, (byte)0x2C, (byte)0x24, (byte)0x00, // Char 110 (n)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x18, (byte)0x00, // Char 111 (o)
			    (byte)0x00, (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x38, (byte)0x20, (byte)0x20, (byte)0x00, // Char 112 (p)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x1C, (byte)0x02, // Char 113 (q)
			    (byte)0x00, (byte)0x00, (byte)0x38, (byte)0x24, (byte)0x38, (byte)0x24, (byte)0x24, (byte)0x00, // Char 114 (r)
			    (byte)0x00, (byte)0x00, (byte)0x1C, (byte)0x20, (byte)0x18, (byte)0x04, (byte)0x38, (byte)0x00, // Char 115 (s)
			    (byte)0x00, (byte)0x00, (byte)0x38, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, // Char 116 (t)
			    (byte)0x00, (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x3C, (byte)0x00, // Char 117 (u)
			    (byte)0x00, (byte)0x00, (byte)0x24, (byte)0x24, (byte)0x24, (byte)0x14, (byte)0x0C, (byte)0x00, // Char 118 (v)
			    (byte)0x00, (byte)0x00, (byte)0x42, (byte)0x42, (byte)0x5A, (byte)0x66, (byte)0x42, (byte)0x00, // Char 119 (w)
			    (byte)0x00, (byte)0x00, (byte)0x44, (byte)0x28, (byte)0x10, (byte)0x28, (byte)0x44, (byte)0x00, // Char 120 (x)
			    (byte)0x00, (byte)0x00, (byte)0x44, (byte)0x28, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, // Char 121 (y)
			    (byte)0x00, (byte)0x00, (byte)0x7C, (byte)0x08, (byte)0x10, (byte)0x20, (byte)0x7C, (byte)0x00, // Char 122 (z)
			    (byte)0x0E, (byte)0x10, (byte)0x10, (byte)0x20, (byte)0x10, (byte)0x10, (byte)0x0E, (byte)0x00, // Char 123 ({)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x00, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x00, // Char 124 (|)
			    (byte)0xE0, (byte)0x10, (byte)0x10, (byte)0x08, (byte)0x10, (byte)0x10, (byte)0xE0, (byte)0x00, // Char 125 (})
			    (byte)0x00, (byte)0x00, (byte)0x60, (byte)0x92, (byte)0x0C, (byte)0x00, (byte)0x00, (byte)0x00, // Char 126 (~)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x24, (byte)0x42, (byte)0xFF, (byte)0x00, (byte)0x00, // Char 127 (.)
			    (byte)0x7C, (byte)0x82, (byte)0x80, (byte)0x80, (byte)0x82, (byte)0x7C, (byte)0x08, (byte)0x30, // Char 128 (.)
			    (byte)0x48, (byte)0x00, (byte)0x84, (byte)0x84, (byte)0x84, (byte)0x84, (byte)0x7C, (byte)0x00, // Char 129 (.)
			    (byte)0x0C, (byte)0x10, (byte)0x7C, (byte)0x82, (byte)0xFC, (byte)0x80, (byte)0x7C, (byte)0x00, // Char 130 (.)
			    (byte)0x18, (byte)0x24, (byte)0x7C, (byte)0x02, (byte)0x7E, (byte)0x82, (byte)0x7C, (byte)0x00, // Char 131 (.)
			    (byte)0x24, (byte)0x00, (byte)0x7C, (byte)0x02, (byte)0x7E, (byte)0x82, (byte)0x7C, (byte)0x00, // Char 132 (.)
			    (byte)0x18, (byte)0x04, (byte)0x7C, (byte)0x02, (byte)0x7E, (byte)0x82, (byte)0x7C, (byte)0x00, // Char 133 (.)
			    (byte)0x10, (byte)0x00, (byte)0x7C, (byte)0x02, (byte)0x7E, (byte)0x82, (byte)0x7C, (byte)0x00, // Char 134 (.)
			    (byte)0x00, (byte)0x00, (byte)0x7C, (byte)0x80, (byte)0x80, (byte)0x7C, (byte)0x08, (byte)0x30, // Char 135 (.)
			    (byte)0x18, (byte)0x24, (byte)0x7C, (byte)0x82, (byte)0xFC, (byte)0x80, (byte)0x7C, (byte)0x00, // Char 136 (.)
			    (byte)0x24, (byte)0x00, (byte)0x7C, (byte)0x82, (byte)0xFC, (byte)0x80, (byte)0x7C, (byte)0x00, // Char 137 (.)
			    (byte)0x30, (byte)0x08, (byte)0x7C, (byte)0x82, (byte)0xFC, (byte)0x80, (byte)0x7C, (byte)0x00, // Char 138 (.)
			    (byte)0x24, (byte)0x00, (byte)0x18, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x1C, (byte)0x00, // Char 139 (.)
			    (byte)0x18, (byte)0x24, (byte)0x18, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x1C, (byte)0x00, // Char 140 (.)
			    (byte)0x18, (byte)0x04, (byte)0x18, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x1C, (byte)0x00, // Char 141 (.)
			    (byte)0x24, (byte)0x00, (byte)0x38, (byte)0x44, (byte)0x7C, (byte)0x44, (byte)0x44, (byte)0x00, // Char 142 (.)
			    (byte)0x18, (byte)0x00, (byte)0x38, (byte)0x44, (byte)0x7C, (byte)0x44, (byte)0x44, (byte)0x00, // Char 143 (.)
			    (byte)0x0C, (byte)0x10, (byte)0xFE, (byte)0x40, (byte)0x78, (byte)0x40, (byte)0xFE, (byte)0x00, // Char 144 (.)
			    (byte)0x00, (byte)0x00, (byte)0x7C, (byte)0x1A, (byte)0x7E, (byte)0xD8, (byte)0x7E, (byte)0x00, // Char 145 (.)
			    (byte)0x7E, (byte)0xD8, (byte)0xD8, (byte)0xDE, (byte)0xF8, (byte)0xD8, (byte)0xDE, (byte)0x00, // Char 146 (.)
			    (byte)0x18, (byte)0x24, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 147 (.)
			    (byte)0x66, (byte)0x00, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 148 (.)
			    (byte)0x38, (byte)0x0C, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 149 (.)
			    (byte)0x18, (byte)0x24, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7E, (byte)0x00, // Char 150 (.)
			    (byte)0x38, (byte)0x0C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7E, (byte)0x00, // Char 151 (.)
			    (byte)0x66, (byte)0x00, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7E, (byte)0x06, (byte)0x7C, // Char 152 (.)
			    (byte)0x66, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 153 (.)
			    (byte)0xC6, (byte)0x00, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 154 (.)
			    (byte)0x18, (byte)0x7C, (byte)0xC6, (byte)0xC0, (byte)0xC6, (byte)0x7C, (byte)0x18, (byte)0x00, // Char 155 (.)
			    (byte)0x1E, (byte)0x32, (byte)0x30, (byte)0x78, (byte)0x30, (byte)0x70, (byte)0xFE, (byte)0x00, // Char 156 (.)
			    (byte)0x66, (byte)0x3C, (byte)0x18, (byte)0x7E, (byte)0x18, (byte)0x3C, (byte)0x18, (byte)0x00, // Char 157 (.)
			    (byte)0xFC, (byte)0xC6, (byte)0xFC, (byte)0xC0, (byte)0xCC, (byte)0xDE, (byte)0xCC, (byte)0x0E, // Char 158 (.)
			    (byte)0x00, (byte)0x1C, (byte)0x32, (byte)0x30, (byte)0xFC, (byte)0x30, (byte)0xF0, (byte)0x00, // Char 159 (.)
			    (byte)0x0E, (byte)0x18, (byte)0x7C, (byte)0x06, (byte)0x7E, (byte)0xC6, (byte)0x7E, (byte)0x00, // Char 160 (.)
			    (byte)0x1A, (byte)0x30, (byte)0x38, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x3C, (byte)0x00, // Char 161 (.)
			    (byte)0x0E, (byte)0x18, (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 162 (.)
			    (byte)0x0E, (byte)0x18, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7E, (byte)0x00, // Char 163 (.)
			    (byte)0x66, (byte)0x98, (byte)0xFC, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 164 (.)
			    (byte)0x66, (byte)0x98, (byte)0xE6, (byte)0xF6, (byte)0xDE, (byte)0xCE, (byte)0xC6, (byte)0x00, // Char 165 (.)
			    (byte)0x7C, (byte)0x06, (byte)0x7E, (byte)0xC6, (byte)0x7E, (byte)0x00, (byte)0xFE, (byte)0x00, // Char 166 (.)
			    (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, (byte)0xFE, (byte)0x00, // Char 167 (.)
			    (byte)0x18, (byte)0x00, (byte)0x18, (byte)0x30, (byte)0x60, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 168 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0xC0, (byte)0xC0, (byte)0xC0, (byte)0xC0, (byte)0x00, // Char 169 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0x06, (byte)0x06, (byte)0x06, (byte)0x06, (byte)0x00, // Char 170 (.)
			    (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x9C, (byte)0x02, (byte)0x08, (byte)0x1E, (byte)0x00, // Char 171 (.)
			    (byte)0x80, (byte)0x80, (byte)0x80, (byte)0x90, (byte)0x14, (byte)0x1E, (byte)0x04, (byte)0x00, // Char 172 (.)
			    (byte)0x10, (byte)0x00, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x00, // Char 173 (.)
			    (byte)0x00, (byte)0x22, (byte)0x44, (byte)0x88, (byte)0x44, (byte)0x22, (byte)0x00, (byte)0x00, // Char 174 (.)
			    (byte)0x00, (byte)0x88, (byte)0x44, (byte)0x22, (byte)0x44, (byte)0x88, (byte)0x00, (byte)0x00, // Char 175 (.)
			    (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, (byte)0xAA, // Char 176 (.)
			    (byte)0x55, (byte)0x55, (byte)0x55, (byte)0x55, (byte)0x55, (byte)0x55, (byte)0x55, (byte)0x55, // Char 177 (.)
			    (byte)0x44, (byte)0x22, (byte)0x44, (byte)0x22, (byte)0x44, (byte)0x22, (byte)0x44, (byte)0x22, // Char 178 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 179 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xF8, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 180 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xF8, (byte)0x08, (byte)0xF8, (byte)0x08, (byte)0x08, // Char 181 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xF4, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 182 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 183 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0x08, (byte)0xF8, (byte)0x08, (byte)0x08, // Char 184 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xF4, (byte)0x04, (byte)0xF4, (byte)0x14, (byte)0x14, // Char 185 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 186 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x04, (byte)0xF4, (byte)0x14, (byte)0x14, // Char 187 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xF4, (byte)0x04, (byte)0xFC, (byte)0x00, (byte)0x00, // Char 188 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xFC, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 189 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xF8, (byte)0x08, (byte)0xF8, (byte)0x00, (byte)0x00, // Char 190 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 191 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x0F, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 192 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 193 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 194 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x0F, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 195 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 196 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xFF, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 197 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x0F, (byte)0x08, (byte)0x0F, (byte)0x08, (byte)0x08, // Char 198 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x17, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 199 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x17, (byte)0x10, (byte)0x1F, (byte)0x00, (byte)0x00, // Char 200 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x1F, (byte)0x10, (byte)0x17, (byte)0x14, (byte)0x14, // Char 201 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xF7, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, // Char 202 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xF7, (byte)0x14, (byte)0x14, // Char 203 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x17, (byte)0x10, (byte)0x17, (byte)0x14, (byte)0x14, // Char 204 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, // Char 205 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xF7, (byte)0x00, (byte)0xF7, (byte)0x14, (byte)0x14, // Char 206 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, // Char 207 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 208 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x08, (byte)0x08, // Char 209 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 210 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x1F, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 211 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x0F, (byte)0x08, (byte)0x0F, (byte)0x00, (byte)0x00, // Char 212 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x1F, (byte)0x10, (byte)0x1F, (byte)0x10, (byte)0x10, // Char 213 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x1F, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 214 (.)
			    (byte)0x14, (byte)0x14, (byte)0x14, (byte)0xFF, (byte)0x14, (byte)0x14, (byte)0x14, (byte)0x14, // Char 215 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xFF, (byte)0x08, (byte)0xFF, (byte)0x08, (byte)0x08, // Char 216 (.)
			    (byte)0x08, (byte)0x08, (byte)0x08, (byte)0xF8, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 217 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0F, (byte)0x08, (byte)0x08, (byte)0x08, (byte)0x08, // Char 218 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, // Char 219 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, // Char 220 (.)
			    (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, // Char 221 (.)
			    (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, // Char 222 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 223 (.)
			    (byte)0x00, (byte)0x00, (byte)0x77, (byte)0x98, (byte)0x98, (byte)0x77, (byte)0x00, (byte)0x00, // Char 224 (.)
			    (byte)0x1C, (byte)0x36, (byte)0x66, (byte)0xFC, (byte)0xC6, (byte)0xC6, (byte)0xFC, (byte)0xC0, // Char 225 (.)
			    (byte)0xFE, (byte)0x62, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x00, // Char 226 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x00, // Char 227 (.)
			    (byte)0xFE, (byte)0x62, (byte)0x30, (byte)0x18, (byte)0x30, (byte)0x62, (byte)0xFE, (byte)0x00, // Char 228 (.)
			    (byte)0x00, (byte)0x00, (byte)0x3F, (byte)0x66, (byte)0xC6, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 229 (.)
			    (byte)0x00, (byte)0x00, (byte)0x33, (byte)0x33, (byte)0x33, (byte)0x3E, (byte)0x30, (byte)0xF0, // Char 230 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x00, // Char 231 (.)
			    (byte)0x3C, (byte)0x18, (byte)0x3C, (byte)0x66, (byte)0x66, (byte)0x3C, (byte)0x18, (byte)0x3C, // Char 232 (.)
			    (byte)0x00, (byte)0x7C, (byte)0xC6, (byte)0xFE, (byte)0xC6, (byte)0x7C, (byte)0x00, (byte)0x00, // Char 233 (.)
			    (byte)0x00, (byte)0x7E, (byte)0xC3, (byte)0xC3, (byte)0xC3, (byte)0x66, (byte)0xE7, (byte)0x00, // Char 234 (.)
			    (byte)0x1E, (byte)0x19, (byte)0x3C, (byte)0x66, (byte)0xC6, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 235 (.)
			    (byte)0x00, (byte)0x00, (byte)0x66, (byte)0x99, (byte)0x99, (byte)0x66, (byte)0x00, (byte)0x00, // Char 236 (.)
			    (byte)0x00, (byte)0x03, (byte)0x7C, (byte)0xCE, (byte)0xE6, (byte)0x7C, (byte)0xC0, (byte)0x00, // Char 237 (.)
			    (byte)0x00, (byte)0x3E, (byte)0xC0, (byte)0xFE, (byte)0xC0, (byte)0x3E, (byte)0x00, (byte)0x00, // Char 238 (.)
			    (byte)0x00, (byte)0x7E, (byte)0xC3, (byte)0xC3, (byte)0xC3, (byte)0xC3, (byte)0x00, (byte)0x00, // Char 239 (.)
			    (byte)0x00, (byte)0xFE, (byte)0x00, (byte)0xFE, (byte)0x00, (byte)0xFE, (byte)0x00, (byte)0x00, // Char 240 (.)
			    (byte)0x08, (byte)0x08, (byte)0x3E, (byte)0x08, (byte)0x08, (byte)0x00, (byte)0x3E, (byte)0x00, // Char 241 (.)
			    (byte)0x30, (byte)0x08, (byte)0x04, (byte)0x08, (byte)0x30, (byte)0x00, (byte)0x7E, (byte)0x00, // Char 242 (.)
			    (byte)0x18, (byte)0x20, (byte)0x40, (byte)0x20, (byte)0x18, (byte)0x00, (byte)0xFC, (byte)0x00, // Char 243 (.)
			    (byte)0x00, (byte)0x0E, (byte)0x11, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, // Char 244 (.)
			    (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x10, (byte)0x90, (byte)0x60, (byte)0x00, // Char 245 (.)
			    (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x3E, (byte)0x00, (byte)0x08, (byte)0x00, (byte)0x00, // Char 246 (.)
			    (byte)0x00, (byte)0x76, (byte)0xDC, (byte)0x00, (byte)0x76, (byte)0xDC, (byte)0x00, (byte)0x00, // Char 247 (.)
			    (byte)0x3C, (byte)0x66, (byte)0x3C, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 248 (.)
			    (byte)0x00, (byte)0x18, (byte)0x3C, (byte)0x18, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 249 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x00, (byte)0x00, (byte)0x00, // Char 250 (.)
			    (byte)0x0F, (byte)0x0C, (byte)0x0C, (byte)0x0C, (byte)0xEC, (byte)0x6C, (byte)0x38, (byte)0x00, // Char 251 (.)
			    (byte)0x50, (byte)0x68, (byte)0x48, (byte)0x48, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 252 (.)
			    (byte)0xF0, (byte)0x30, (byte)0xC0, (byte)0xF0, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 253 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x3C, (byte)0x3C, (byte)0x3C, (byte)0x3C, (byte)0x00, // Char 254 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 255 (.)
			    // CP111.pf  
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 000 (.)
			    (byte)0x7E, (byte)0x81, (byte)0xA5, (byte)0x81, (byte)0xBD, (byte)0x99, (byte)0x81, (byte)0x7E, // Char 001 (.)
			    (byte)0x7E, (byte)0xFF, (byte)0xDB, (byte)0xFF, (byte)0xC3, (byte)0xE7, (byte)0xFF, (byte)0x7E, // Char 002 (.)
			    (byte)0x6C, (byte)0xFE, (byte)0xFE, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x10, (byte)0x00, // Char 003 (.)
			    (byte)0x10, (byte)0x38, (byte)0x7C, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x10, (byte)0x00, // Char 004 (.)
			    (byte)0x38, (byte)0x7C, (byte)0xEE, (byte)0xEE, (byte)0xEE, (byte)0x38, (byte)0x38, (byte)0x7C, // Char 005 (.)
			    (byte)0x00, (byte)0x10, (byte)0x38, (byte)0x7C, (byte)0xFE, (byte)0x7C, (byte)0x38, (byte)0x7C, // Char 006 (.)
			    (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x3C, (byte)0x3C, (byte)0x18, (byte)0x00, (byte)0x00, // Char 007 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xE7, (byte)0xC3, (byte)0xC3, (byte)0xE7, (byte)0xFF, (byte)0xFF, // Char 008 (.)
			    (byte)0x00, (byte)0x3C, (byte)0x66, (byte)0x42, (byte)0x42, (byte)0x66, (byte)0x3C, (byte)0x00, // Char 009 (.)
			    (byte)0xFF, (byte)0xC3, (byte)0x99, (byte)0xBD, (byte)0xBD, (byte)0x99, (byte)0xC3, (byte)0xFF, // Char 010 (.)
			    (byte)0x0F, (byte)0x07, (byte)0x0F, (byte)0x7D, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, // Char 011 (.)
			    (byte)0x3C, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x3C, (byte)0x18, (byte)0x7E, (byte)0x18, // Char 012 (.)
			    (byte)0x3F, (byte)0x33, (byte)0x3F, (byte)0x30, (byte)0x30, (byte)0x70, (byte)0xF0, (byte)0xE0, // Char 013 (.)
			    (byte)0x7F, (byte)0x63, (byte)0x7F, (byte)0x63, (byte)0x63, (byte)0x67, (byte)0xE6, (byte)0xC0, // Char 014 (.)
			    (byte)0x18, (byte)0xDB, (byte)0x3C, (byte)0xE7, (byte)0xE7, (byte)0x3C, (byte)0xDB, (byte)0x18, // Char 015 (.)
			    (byte)0x80, (byte)0xE0, (byte)0xF8, (byte)0xFE, (byte)0xF8, (byte)0xE0, (byte)0x80, (byte)0x00, // Char 016 (.)
			    (byte)0x02, (byte)0x0E, (byte)0x3E, (byte)0xFE, (byte)0x3E, (byte)0x0E, (byte)0x02, (byte)0x00, // Char 017 (.)
			    (byte)0x18, (byte)0x3C, (byte)0x7E, (byte)0x18, (byte)0x18, (byte)0x7E, (byte)0x3C, (byte)0x18, // Char 018 (.)
			    (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x00, (byte)0x66, (byte)0x00, // Char 019 (.)
			    (byte)0x7F, (byte)0xDB, (byte)0xDB, (byte)0x7B, (byte)0x1B, (byte)0x1B, (byte)0x1B, (byte)0x00, // Char 020 (.)
			    (byte)0x3C, (byte)0x66, (byte)0x38, (byte)0x6C, (byte)0x6C, (byte)0x38, (byte)0xCC, (byte)0x78, // Char 021 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0x7E, (byte)0x7E, (byte)0x00, // Char 022 (.)
			    (byte)0x18, (byte)0x3C, (byte)0x7E, (byte)0x18, (byte)0x7E, (byte)0x3C, (byte)0x18, (byte)0x7E, // Char 023 (.)
			    (byte)0x18, (byte)0x3C, (byte)0x7E, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x00, // Char 024 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x7E, (byte)0x3C, (byte)0x18, (byte)0x00, // Char 025 (.)
			    (byte)0x00, (byte)0x18, (byte)0x0C, (byte)0xFE, (byte)0x0C, (byte)0x18, (byte)0x00, (byte)0x00, // Char 026 (.)
			    (byte)0x00, (byte)0x30, (byte)0x60, (byte)0xFE, (byte)0x60, (byte)0x30, (byte)0x00, (byte)0x00, // Char 027 (.)
			    (byte)0x00, (byte)0x00, (byte)0xC0, (byte)0xC0, (byte)0xC0, (byte)0xFE, (byte)0x00, (byte)0x00, // Char 028 (.)
			    (byte)0x00, (byte)0x24, (byte)0x66, (byte)0xFF, (byte)0x66, (byte)0x24, (byte)0x00, (byte)0x00, // Char 029 (.)
			    (byte)0x00, (byte)0x18, (byte)0x3C, (byte)0x7E, (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, // Char 030 (.)
			    (byte)0x00, (byte)0xFF, (byte)0xFF, (byte)0x7E, (byte)0x3C, (byte)0x18, (byte)0x00, (byte)0x00, // Char 031 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 032 ( )
			    (byte)0x30, (byte)0x78, (byte)0x78, (byte)0x30, (byte)0x30, (byte)0x00, (byte)0x30, (byte)0x00, // Char 033 (!)
			    (byte)0x6C, (byte)0x6C, (byte)0x28, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 034 (")
			    (byte)0x6C, (byte)0x6C, (byte)0xFE, (byte)0x6C, (byte)0xFE, (byte)0x6C, (byte)0x6C, (byte)0x00, // Char 035 (#)
			    (byte)0x18, (byte)0x7E, (byte)0xC0, (byte)0x7C, (byte)0x06, (byte)0xFC, (byte)0x18, (byte)0x00, // Char 036 ($)
			    (byte)0x00, (byte)0xC6, (byte)0xCC, (byte)0x18, (byte)0x30, (byte)0x66, (byte)0xC6, (byte)0x00, // Char 037 (%)
			    (byte)0x38, (byte)0x6C, (byte)0x38, (byte)0x76, (byte)0xDC, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 038 (&)
			    (byte)0x30, (byte)0x30, (byte)0x60, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 039 (')
			    (byte)0x18, (byte)0x30, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x00, // Char 040 (()
			    (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x30, (byte)0x60, (byte)0x00, // Char 041 ())
			    (byte)0x00, (byte)0x66, (byte)0x3C, (byte)0xFF, (byte)0x3C, (byte)0x66, (byte)0x00, (byte)0x00, // Char 042 (*)
			    (byte)0x00, (byte)0x30, (byte)0x30, (byte)0xFC, (byte)0x30, (byte)0x30, (byte)0x00, (byte)0x00, // Char 043 (+)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x60, // Char 044 (,)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 045 (-)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x00, // Char 046 (.)
			    (byte)0x06, (byte)0x0C, (byte)0x18, (byte)0x30, (byte)0x60, (byte)0xC0, (byte)0x80, (byte)0x00, // Char 047 (/)
			    (byte)0x7C, (byte)0xC6, (byte)0xC6, (byte)0xD6, (byte)0xC6, (byte)0xC6, (byte)0x7C, (byte)0x00, // Char 048 (0)
			    (byte)0x30, (byte)0x70, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0xFC, (byte)0x00, // Char 049 (1)
			    (byte)0x78, (byte)0xCC, (byte)0x0C, (byte)0x38, (byte)0x60, (byte)0xCC, (byte)0xFC, (byte)0x00, // Char 050 (2)
			    (byte)0x78, (byte)0xCC, (byte)0x0C, (byte)0x38, (byte)0x0C, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 051 (3)
			    (byte)0x1C, (byte)0x3C, (byte)0x6C, (byte)0xCC, (byte)0xFE, (byte)0x0C, (byte)0x1E, (byte)0x00, // Char 052 (4)
			    (byte)0xFC, (byte)0xC0, (byte)0xF8, (byte)0x0C, (byte)0x0C, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 053 (5)
			    (byte)0x38, (byte)0x60, (byte)0xC0, (byte)0xF8, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 054 (6)
			    (byte)0xFC, (byte)0xCC, (byte)0x0C, (byte)0x18, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x00, // Char 055 (7)
			    (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 056 (8)
			    (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0x7C, (byte)0x0C, (byte)0x18, (byte)0x70, (byte)0x00, // Char 057 (9)
			    (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x00, // Char 058 (:)
			    (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x60, // Char 059 (;)
			    (byte)0x18, (byte)0x30, (byte)0x60, (byte)0xC0, (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x00, // Char 060 (<)
			    (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0x00, // Char 061 (=)
			    (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x0C, (byte)0x18, (byte)0x30, (byte)0x60, (byte)0x00, // Char 062 (>)
			    (byte)0x78, (byte)0xCC, (byte)0x0C, (byte)0x18, (byte)0x30, (byte)0x00, (byte)0x30, (byte)0x00, // Char 063 (?)
			    (byte)0x7C, (byte)0xC6, (byte)0xDE, (byte)0xDE, (byte)0xDC, (byte)0xC0, (byte)0x78, (byte)0x00, // Char 064 (@)
			    (byte)0x30, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xFC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 065 (A)
			    (byte)0xFC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x66, (byte)0x66, (byte)0xFC, (byte)0x00, // Char 066 (B)
			    (byte)0x3C, (byte)0x66, (byte)0xC0, (byte)0xC0, (byte)0xC0, (byte)0x66, (byte)0x3C, (byte)0x00, // Char 067 (C)
			    (byte)0xF8, (byte)0x6C, (byte)0x66, (byte)0x66, (byte)0x66, (byte)0x6C, (byte)0xF8, (byte)0x00, // Char 068 (D)
			    (byte)0xFE, (byte)0x62, (byte)0x68, (byte)0x78, (byte)0x68, (byte)0x62, (byte)0xFE, (byte)0x00, // Char 069 (E)
			    (byte)0xFE, (byte)0x62, (byte)0x68, (byte)0x78, (byte)0x68, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 070 (F)
			    (byte)0x3C, (byte)0x66, (byte)0xC0, (byte)0xC0, (byte)0xCE, (byte)0x66, (byte)0x3E, (byte)0x00, // Char 071 (G)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xFC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 072 (H)
			    (byte)0x78, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 073 (I)
			    (byte)0x1E, (byte)0x0C, (byte)0x0C, (byte)0x0C, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 074 (J)
			    (byte)0xE6, (byte)0x66, (byte)0x6C, (byte)0x78, (byte)0x6C, (byte)0x66, (byte)0xE6, (byte)0x00, // Char 075 (K)
			    (byte)0xF0, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x62, (byte)0x66, (byte)0xFE, (byte)0x00, // Char 076 (L)
			    (byte)0xC6, (byte)0xEE, (byte)0xFE, (byte)0xFE, (byte)0xD6, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 077 (M)
			    (byte)0xC6, (byte)0xE6, (byte)0xF6, (byte)0xDE, (byte)0xCE, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 078 (N)
			    (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x00, // Char 079 (O)
			    (byte)0xFC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x60, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 080 (P)
			    (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xDC, (byte)0x78, (byte)0x1C, (byte)0x00, // Char 081 (Q)
			    (byte)0xFC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x6C, (byte)0x66, (byte)0xE6, (byte)0x00, // Char 082 (R)
			    (byte)0x78, (byte)0xCC, (byte)0xC0, (byte)0x78, (byte)0x0C, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 083 (S)
			    (byte)0xFC, (byte)0xB4, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 084 (T)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xFC, (byte)0x00, // Char 085 (U)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x30, (byte)0x00, // Char 086 (V)
			    (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0xD6, (byte)0xFE, (byte)0xEE, (byte)0xC6, (byte)0x00, // Char 087 (W)
			    (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 088 (X)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 089 (Y)
			    (byte)0xFE, (byte)0xC6, (byte)0x8C, (byte)0x18, (byte)0x32, (byte)0x66, (byte)0xFE, (byte)0x00, // Char 090 (Z)
			    (byte)0x78, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x78, (byte)0x00, // Char 091 ([)
			    (byte)0xC0, (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x0C, (byte)0x06, (byte)0x02, (byte)0x00, // Char 092 (\)
			    (byte)0x78, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x78, (byte)0x00, // Char 093 (])
			    (byte)0x10, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 094 (^)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, // Char 095 (_)
			    (byte)0x30, (byte)0x18, (byte)0x0C, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 096 (`)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0x0C, (byte)0x7C, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 097 (a)
			    (byte)0xE0, (byte)0x60, (byte)0x60, (byte)0x7C, (byte)0x66, (byte)0x66, (byte)0xDC, (byte)0x00, // Char 098 (b)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xC0, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 099 (c)
			    (byte)0x1C, (byte)0x0C, (byte)0x0C, (byte)0x7C, (byte)0xCC, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 100 (d)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xFC, (byte)0xC0, (byte)0x78, (byte)0x00, // Char 101 (e)
			    (byte)0x38, (byte)0x6C, (byte)0x60, (byte)0xF0, (byte)0x60, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 102 (f)
			    (byte)0x00, (byte)0x00, (byte)0x76, (byte)0xCC, (byte)0xCC, (byte)0x7C, (byte)0x0C, (byte)0xF8, // Char 103 (g)
			    (byte)0xE0, (byte)0x60, (byte)0x6C, (byte)0x76, (byte)0x66, (byte)0x66, (byte)0xE6, (byte)0x00, // Char 104 (h)
			    (byte)0x30, (byte)0x00, (byte)0x70, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 105 (i)
			    (byte)0x0C, (byte)0x00, (byte)0x0C, (byte)0x0C, (byte)0x0C, (byte)0xCC, (byte)0xCC, (byte)0x78, // Char 106 (j)
			    (byte)0xE0, (byte)0x60, (byte)0x66, (byte)0x6C, (byte)0x78, (byte)0x6C, (byte)0xE6, (byte)0x00, // Char 107 (k)
			    (byte)0x70, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 108 (l)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xFE, (byte)0xD6, (byte)0xD6, (byte)0xC6, (byte)0x00, // Char 109 (m)
			    (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 110 (n)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 111 (o)
			    (byte)0x00, (byte)0x00, (byte)0xDC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x60, (byte)0xF0, // Char 112 (p)
			    (byte)0x00, (byte)0x00, (byte)0x76, (byte)0xCC, (byte)0xCC, (byte)0x7C, (byte)0x0C, (byte)0x1E, // Char 113 (q)
			    (byte)0x00, (byte)0x00, (byte)0xDC, (byte)0x76, (byte)0x66, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 114 (r)
			    (byte)0x00, (byte)0x00, (byte)0x7C, (byte)0xC0, (byte)0x78, (byte)0x0C, (byte)0xF8, (byte)0x00, // Char 115 (s)
			    (byte)0x10, (byte)0x30, (byte)0x7C, (byte)0x30, (byte)0x30, (byte)0x34, (byte)0x18, (byte)0x00, // Char 116 (t)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 117 (u)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x30, (byte)0x00, // Char 118 (v)
			    (byte)0x00, (byte)0x00, (byte)0xC6, (byte)0xD6, (byte)0xD6, (byte)0xFE, (byte)0x6C, (byte)0x00, // Char 119 (w)
			    (byte)0x00, (byte)0x00, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0x00, // Char 120 (x)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x7C, (byte)0x0C, (byte)0xF8, // Char 121 (y)
			    (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x98, (byte)0x30, (byte)0x64, (byte)0xFC, (byte)0x00, // Char 122 (z)
			    (byte)0x1C, (byte)0x30, (byte)0x30, (byte)0xE0, (byte)0x30, (byte)0x30, (byte)0x1C, (byte)0x00, // Char 123 ({)
			    (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x00, // Char 124 (|)
			    (byte)0xE0, (byte)0x30, (byte)0x30, (byte)0x1C, (byte)0x30, (byte)0x30, (byte)0xE0, (byte)0x00, // Char 125 (})
			    (byte)0x76, (byte)0xDC, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 126 (~)
			    (byte)0x00, (byte)0x10, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0xFE, (byte)0x00, // Char 127 (.)
			    (byte)0x30, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xFC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 128 (.)
			    (byte)0xFC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x66, (byte)0x66, (byte)0xFC, (byte)0x00, // Char 129 (.)
			    (byte)0xFE, (byte)0x62, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 130 (.)
			    (byte)0x10, (byte)0x38, (byte)0x38, (byte)0x6C, (byte)0x6C, (byte)0xC6, (byte)0xFE, (byte)0x00, // Char 131 (.)
			    (byte)0xFE, (byte)0x62, (byte)0x68, (byte)0x78, (byte)0x68, (byte)0x62, (byte)0xFE, (byte)0x00, // Char 132 (.)
			    (byte)0xFE, (byte)0xC6, (byte)0x8C, (byte)0x18, (byte)0x32, (byte)0x66, (byte)0xFE, (byte)0x00, // Char 133 (.)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xFC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 134 (.)
			    (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xFE, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x00, // Char 135 (.)
			    (byte)0x78, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 136 (.)
			    (byte)0xE6, (byte)0x66, (byte)0x6C, (byte)0x78, (byte)0x6C, (byte)0x66, (byte)0xE6, (byte)0x00, // Char 137 (.)
			    (byte)0x10, (byte)0x38, (byte)0x38, (byte)0x6C, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 138 (.)
			    (byte)0xC6, (byte)0xEE, (byte)0xFE, (byte)0xFE, (byte)0xD6, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 139 (.)
			    (byte)0xC6, (byte)0xE6, (byte)0xF6, (byte)0xDE, (byte)0xCE, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 140 (.)
			    (byte)0xFC, (byte)0xCC, (byte)0x00, (byte)0x78, (byte)0x00, (byte)0xCC, (byte)0xFC, (byte)0x00, // Char 141 (.)
			    (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x00, // Char 142 (.)
			    (byte)0xFC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 143 (.)
			    (byte)0xFC, (byte)0x66, (byte)0x66, (byte)0x7C, (byte)0x60, (byte)0x60, (byte)0xF0, (byte)0x00, // Char 144 (.)
			    (byte)0xFC, (byte)0xCC, (byte)0x60, (byte)0x30, (byte)0x60, (byte)0xCC, (byte)0xFC, (byte)0x00, // Char 145 (.)
			    (byte)0xFC, (byte)0xB4, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 146 (.)
			    (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x30, (byte)0x30, (byte)0x78, (byte)0x00, // Char 147 (.)
			    (byte)0x10, (byte)0x7C, (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0x7C, (byte)0x10, (byte)0x00, // Char 148 (.)
			    (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0x00, // Char 149 (.)
			    (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0x7C, (byte)0x10, (byte)0x38, (byte)0x00, // Char 150 (.)
			    (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0xC6, (byte)0x6C, (byte)0xEE, (byte)0x00, // Char 151 (.)
			    (byte)0x00, (byte)0x00, (byte)0x74, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 152 (.)
			    (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xF8, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 153 (.)
			    (byte)0x00, (byte)0x00, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x6C, (byte)0x6C, (byte)0x38, // Char 154 (.)
			    (byte)0x1C, (byte)0x30, (byte)0x18, (byte)0x7C, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 155 (.)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0x60, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 156 (.)
			    (byte)0xFC, (byte)0x30, (byte)0x60, (byte)0xC0, (byte)0xC0, (byte)0x78, (byte)0x0C, (byte)0x38, // Char 157 (.)
			    (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x0C, // Char 158 (.)
			    (byte)0x78, (byte)0xCC, (byte)0x7C, (byte)0x0C, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 159 (.)
			    (byte)0x00, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x18, (byte)0x00, // Char 160 (.)
			    (byte)0x00, (byte)0x00, (byte)0xE6, (byte)0x6C, (byte)0x78, (byte)0x6C, (byte)0xE6, (byte)0x00, // Char 161 (.)
			    (byte)0x70, (byte)0x98, (byte)0x18, (byte)0x38, (byte)0x6C, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 162 (.)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xF6, (byte)0xC0, // Char 163 (.)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x30, (byte)0x00, // Char 164 (.)
			    (byte)0xFC, (byte)0x60, (byte)0x78, (byte)0xC0, (byte)0xC0, (byte)0x78, (byte)0x0C, (byte)0x38, // Char 165 (.)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 166 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0x6C, (byte)0x6C, (byte)0x6C, (byte)0x6C, (byte)0x00, // Char 167 (.)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xF8, (byte)0xC0, // Char 168 (.)
			    (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 169 (.)
			    (byte)0x00, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xC0, (byte)0x78, (byte)0x0C, (byte)0x38, // Char 170 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFC, (byte)0x30, (byte)0x30, (byte)0x34, (byte)0x18, (byte)0x00, // Char 171 (.)
			    (byte)0x00, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 172 (.)
			    (byte)0x00, (byte)0x00, (byte)0x5C, (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0x7C, (byte)0x10, // Char 173 (.)
			    (byte)0x00, (byte)0x00, (byte)0xC6, (byte)0x6C, (byte)0x38, (byte)0x38, (byte)0x6C, (byte)0xC6, // Char 174 (.)
			    (byte)0x00, (byte)0x10, (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0xD6, (byte)0x7C, (byte)0x10, // Char 175 (.)
			    (byte)0x22, (byte)0x88, (byte)0x22, (byte)0x88, (byte)0x22, (byte)0x88, (byte)0x22, (byte)0x88, // Char 176 (.)
			    (byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA, (byte)0x55, (byte)0xAA, // Char 177 (.)
			    (byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77, (byte)0xDD, (byte)0x77, // Char 178 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, // Char 179 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0xF8, (byte)0x18, (byte)0x18, (byte)0x18, // Char 180 (.)
			    (byte)0x18, (byte)0x18, (byte)0xF8, (byte)0x18, (byte)0xF8, (byte)0x18, (byte)0x18, (byte)0x18, // Char 181 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0xF6, (byte)0x36, (byte)0x36, (byte)0x36, // Char 182 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0x36, (byte)0x36, (byte)0x36, // Char 183 (.)
			    (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0x18, (byte)0xF8, (byte)0x18, (byte)0x18, (byte)0x18, // Char 184 (.)
			    (byte)0x36, (byte)0x36, (byte)0xF6, (byte)0x06, (byte)0xF6, (byte)0x36, (byte)0x36, (byte)0x36, // Char 185 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, // Char 186 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFE, (byte)0x06, (byte)0xF6, (byte)0x36, (byte)0x36, (byte)0x36, // Char 187 (.)
			    (byte)0x36, (byte)0x36, (byte)0xF6, (byte)0x06, (byte)0xFE, (byte)0x00, (byte)0x00, (byte)0x00, // Char 188 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0xFE, (byte)0x00, (byte)0x00, (byte)0x00, // Char 189 (.)
			    (byte)0x18, (byte)0x18, (byte)0xF8, (byte)0x18, (byte)0xF8, (byte)0x00, (byte)0x00, (byte)0x00, // Char 190 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xF8, (byte)0x18, (byte)0x18, (byte)0x18, // Char 191 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x1F, (byte)0x00, (byte)0x00, (byte)0x00, // Char 192 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 193 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x18, (byte)0x18, (byte)0x18, // Char 194 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x1F, (byte)0x18, (byte)0x18, (byte)0x18, // Char 195 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 196 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0xFF, (byte)0x18, (byte)0x18, (byte)0x18, // Char 197 (.)
			    (byte)0x18, (byte)0x18, (byte)0x1F, (byte)0x18, (byte)0x1F, (byte)0x18, (byte)0x18, (byte)0x18, // Char 198 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x37, (byte)0x36, (byte)0x36, (byte)0x36, // Char 199 (.)
			    (byte)0x36, (byte)0x36, (byte)0x37, (byte)0x30, (byte)0x3F, (byte)0x00, (byte)0x00, (byte)0x00, // Char 200 (.)
			    (byte)0x00, (byte)0x00, (byte)0x3F, (byte)0x30, (byte)0x37, (byte)0x36, (byte)0x36, (byte)0x36, // Char 201 (.)
			    (byte)0x36, (byte)0x36, (byte)0xF7, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 202 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xF7, (byte)0x36, (byte)0x36, (byte)0x36, // Char 203 (.)
			    (byte)0x36, (byte)0x36, (byte)0x37, (byte)0x30, (byte)0x37, (byte)0x36, (byte)0x36, (byte)0x36, // Char 204 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 205 (.)
			    (byte)0x36, (byte)0x36, (byte)0xF7, (byte)0x00, (byte)0xF7, (byte)0x36, (byte)0x36, (byte)0x36, // Char 206 (.)
			    (byte)0x18, (byte)0x18, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 207 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, // Char 208 (.)
			    (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x18, (byte)0x18, (byte)0x18, // Char 209 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0x36, (byte)0x36, (byte)0x36, // Char 210 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x3F, (byte)0x00, (byte)0x00, (byte)0x00, // Char 211 (.)
			    (byte)0x18, (byte)0x18, (byte)0x1F, (byte)0x18, (byte)0x1F, (byte)0x00, (byte)0x00, (byte)0x00, // Char 212 (.)
			    (byte)0x00, (byte)0x00, (byte)0x1F, (byte)0x18, (byte)0x1F, (byte)0x18, (byte)0x18, (byte)0x18, // Char 213 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x3F, (byte)0x36, (byte)0x36, (byte)0x36, // Char 214 (.)
			    (byte)0x36, (byte)0x36, (byte)0x36, (byte)0x36, (byte)0xFF, (byte)0x36, (byte)0x36, (byte)0x36, // Char 215 (.)
			    (byte)0x18, (byte)0x18, (byte)0xFF, (byte)0x18, (byte)0xFF, (byte)0x18, (byte)0x18, (byte)0x18, // Char 216 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0xF8, (byte)0x00, (byte)0x00, (byte)0x00, // Char 217 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x1F, (byte)0x18, (byte)0x18, (byte)0x18, // Char 218 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, // Char 219 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, // Char 220 (.)
			    (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, (byte)0xF0, // Char 221 (.)
			    (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, (byte)0x0F, // Char 222 (.)
			    (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 223 (.)
			    (byte)0x00, (byte)0x00, (byte)0x6C, (byte)0xC6, (byte)0xD6, (byte)0xFE, (byte)0x6C, (byte)0x00, // Char 224 (.)
			    (byte)0x0E, (byte)0x00, (byte)0x74, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x76, (byte)0x00, // Char 225 (.)
			    (byte)0x1C, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0x60, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 226 (.)
			    (byte)0x1C, (byte)0x00, (byte)0xF8, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x0C, // Char 227 (.)
			    (byte)0xCC, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x18, (byte)0x00, // Char 228 (.)
			    (byte)0x38, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x30, (byte)0x18, (byte)0x00, // Char 229 (.)
			    (byte)0x1C, (byte)0x00, (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 230 (.)
			    (byte)0x1C, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 231 (.)
			    (byte)0xCC, (byte)0x00, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x78, (byte)0x00, // Char 232 (.)
			    (byte)0x0E, (byte)0x00, (byte)0x6C, (byte)0xC6, (byte)0xD6, (byte)0xFE, (byte)0x6C, (byte)0x00, // Char 233 (.)
			    (byte)0x38, (byte)0x6C, (byte)0xC6, (byte)0xC6, (byte)0x6C, (byte)0x6C, (byte)0xEE, (byte)0x00, // Char 234 (.)
			    (byte)0x38, (byte)0x6C, (byte)0x64, (byte)0xF0, (byte)0x60, (byte)0xE6, (byte)0xFC, (byte)0x00, // Char 235 (.)
			    (byte)0x00, (byte)0x00, (byte)0x7E, (byte)0xDB, (byte)0xDB, (byte)0x7E, (byte)0x00, (byte)0x00, // Char 236 (.)
			    (byte)0x06, (byte)0x0C, (byte)0x7E, (byte)0xDB, (byte)0xDB, (byte)0x7E, (byte)0x60, (byte)0xC0, // Char 237 (.)
			    (byte)0x38, (byte)0x60, (byte)0xC0, (byte)0xF8, (byte)0xC0, (byte)0x60, (byte)0x38, (byte)0x00, // Char 238 (.)
			    (byte)0x78, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0xCC, (byte)0x00, // Char 239 (.)
			    (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0x00, // Char 240 (.)
			    (byte)0x30, (byte)0x30, (byte)0xFC, (byte)0x30, (byte)0x30, (byte)0x00, (byte)0xFC, (byte)0x00, // Char 241 (.)
			    (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x30, (byte)0x60, (byte)0x00, (byte)0xFC, (byte)0x00, // Char 242 (.)
			    (byte)0x18, (byte)0x30, (byte)0x60, (byte)0x30, (byte)0x18, (byte)0x00, (byte)0xFC, (byte)0x00, // Char 243 (.)
			    (byte)0x0E, (byte)0x1B, (byte)0x1B, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, // Char 244 (.)
			    (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0x18, (byte)0xD8, (byte)0xD8, (byte)0x70, // Char 245 (.)
			    (byte)0x30, (byte)0x30, (byte)0x00, (byte)0xFC, (byte)0x00, (byte)0x30, (byte)0x30, (byte)0x00, // Char 246 (.)
			    (byte)0x00, (byte)0x76, (byte)0xDC, (byte)0x00, (byte)0x76, (byte)0xDC, (byte)0x00, (byte)0x00, // Char 247 (.)
			    (byte)0x38, (byte)0x6C, (byte)0x6C, (byte)0x38, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 248 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x18, (byte)0x00, (byte)0x00, (byte)0x00, // Char 249 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x18, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, // Char 250 (.)
			    (byte)0x0F, (byte)0x0C, (byte)0x0C, (byte)0x0C, (byte)0xEC, (byte)0x6C, (byte)0x3C, (byte)0x1C, // Char 251 (.)
			    (byte)0x78, (byte)0x6C, (byte)0x6C, (byte)0x6C, (byte)0x6C, (byte)0x00, (byte)0x00, (byte)0x00, // Char 252 (.)
			    (byte)0x38, (byte)0x4C, (byte)0x18, (byte)0x30, (byte)0x7C, (byte)0x00, (byte)0x00, (byte)0x00, // Char 253 (.)
			    (byte)0x00, (byte)0x00, (byte)0x3C, (byte)0x3C, (byte)0x3C, (byte)0x3C, (byte)0x00, (byte)0x00, // Char 254 (.)
			    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00  // Char 255 (.)
			  };

}
